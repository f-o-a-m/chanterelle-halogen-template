.PHONY: help install watch compile-contracts build-dapp deploy test-dapp create-frontend-env
.DEFAULT_GOAL := help

export

# see https://stackoverflow.com/a/26936855/1798418
PATH  := node_modules/.bin:$(PATH)
SHELL := /bin/bash

NODE_URL ?= http://localhost:8545
ABI_ROOT ?= abis

# end export
# please keep that, it helps with autogenerating env wrappers

help: ## Ask for help!
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

all: install
	@echo prereqs that are newer than install: $?

install: ## Runs npm and bower install
	npm install
	spago build

####################
# PURESCRIPT       #
####################

compile-contracts: ## Compile all contracts in dapp and write purescript ffi modules
	pulp run --src-path purs/src/DApp/Compile -m DApp.Compile.Main

build-purs: ## Build whole purescript src and test file
	spago -x spago.dhall build

deploy-contracts: ## Deploy contracts in dapp project
	pulp run --src-path purs/src/DApp -I purs/src/Contracts -m DApp.Deploy.Main

test-purs-dapp: ## Run the dapp test suite
	spago -x test.dhall test --src-path purs/src --test-path purs/test -m Spec.DApp.Deploy.Main

purty: ## run purty to clean up purescript files
	npm run purty

####################
# FRONTEND         #
####################

parcel-start: ## Starts `Parcel` in watch mode, (you might want to build all purescript sources first). Note that you should also be running PureScript IDE server which compiles PureScript files on change, If it's not the case for you run `make build-purs-watch` too.
	parcel --out-dir frontend/dist frontend/index.html

parcel-clean: ## Cleans files generated by `Parcel`
	rimraf .cache ./frontend/dist/{*.js,*.map,*.css,*.html}

parcel-build: ## Builds assets
	parcel build --out-dir frontend/dist frontend/index.html

parcel-pages: ## Builds assets
	parcel build --out-dir frontend/dist frontend/index.html --public-url "https://f-o-a-m.github.io/chanterelle-halogen-template/"
